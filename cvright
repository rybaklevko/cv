#include <iostream>
#include <string>
#include <array>
#include <vector>
#include <stdio.h>

// We should keep list of programmers CVs
// For each CV we have
//      * name field
//      * birthday year
//      * list of skills
//      * list of previous jobs
//      * we would like to print our CV

class JobRecord
{
public:
    JobRecord(const int &mstartyear,const int &mendyear,const std::string &mjobtitle,const std::string &mcompanyname):
        mStartYear{mstartyear}
      ,mEndYear{mendyear},
        mJobTitle{mjobtitle},
        mCompanyName{mcompanyname}
    {


    }
      bool isValid1() const
    {
        return (mStartYear > 1960)
                && (mEndYear > 1960)
                && !mJobTitle.empty()
                && !mCompanyName.empty();
    }


    int mStartYear;
    int mEndYear;
    std::string mJobTitle;
    std::string mCompanyName;
};

class CV
{
public:
    CV(const std::string &name, int birthYear, const std::string &skills) :
        mName{name}
      , mBirthYear{birthYear}
      , mSkills{skills}
    {

    }

    bool isValid() const
    {
        return !mName.empty()
                && ((mBirthYear > 1970) && (mBirthYear < 1995))
                && !mSkills.empty()
                && !mPreviousJobs.empty();
    }

    void print() const
    {
        if (isValid())
        {
            std::cout << mName << " (" << mBirthYear << ")" << std::endl;
            std::cout << "=====================" << std::endl;
            std::cout << "Skills: " << mSkills << std::endl;
            std::cout << "Previous work record: " << mPreviousJobs << std::endl;
            std::cout << std::endl;
        }
    }
    void jobrecord(const JobRecord&jr){
    std::cout<<"<"<<jr.mCompanyName<<","<<jr.mJobTitle<<","<<jr.mStartYear<<","<<jr.mEndYear<<">"<<std::endl;
    }
     void  addJobRecord(const JobRecord&jr)
    {
         mPreviousJobsCompanyName=jr.mCompanyName;
         mPreviousJobsJobTitle=jr.mJobTitle;
         mPreviousJobsStartYear=jr.mStartYear;
         mPreviousJobsEndYear=jr.mEndYear;
         std::string  startYear=std::to_string(jr.mStartYear);
        std::string  endYear=std::to_string(jr.mEndYear);
      mPreviousJobs+=" "+jr.mJobTitle+" "+jr.mCompanyName+" "+startYear+"-"+endYear;
    }
     std::string mPreviousJobsCompanyName;
     std::string mPreviousJobsJobTitle;
     int mPreviousJobsStartYear;
     int mPreviousJobsEndYear;
  private:
    std::string mName;
    int mBirthYear;
    std::string mSkills;
 std::string mPreviousJobs;

};



int main()
{
    CV johnsCV("John Jonson", 1978,"C++, Java");
     JobRecord junmicr(1965,2002,"junior","Microsoft");
      johnsCV.jobrecord(junmicr);
      johnsCV.addJobRecord(junmicr);

      CV dansCV("Dan Davidson", 1988, "C++, Java");
       JobRecord devsoft(1970,2001,"developer","Softserve");
       dansCV.jobrecord(devsoft);
    dansCV.addJobRecord(devsoft);

    CV willCv("Will Walker", 1972, "C++, Java");
     JobRecord devapp(1970, 1999, "developer","Apple");
    willCv.jobrecord(devapp);
     willCv.addJobRecord(devapp);
//    std::array<CV, 3> cvList {johnsCV, dansCV, {"Will Walker", 197, "C++, Java", "IBM 1990-1999; Microsoft 1999-2010"} };
    std::vector<CV> cvList {johnsCV, dansCV , willCv};

    for (const auto& cv: cvList)
    {
        if (cv.isValid())
        {
            cv.print();
        }
        else
        {
            std::cout << "ERROR: CV is invalid" << std::endl;
        }
    }

    return 0;


 }
